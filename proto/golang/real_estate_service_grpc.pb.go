// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: real_estate_service.proto

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RealEstateClient is the client API for RealEstate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealEstateClient interface {
	GetListings(ctx context.Context, in *GetListingsRequest, opts ...grpc.CallOption) (*GetListingsResponse, error)
}

type realEstateClient struct {
	cc grpc.ClientConnInterface
}

func NewRealEstateClient(cc grpc.ClientConnInterface) RealEstateClient {
	return &realEstateClient{cc}
}

func (c *realEstateClient) GetListings(ctx context.Context, in *GetListingsRequest, opts ...grpc.CallOption) (*GetListingsResponse, error) {
	out := new(GetListingsResponse)
	err := c.cc.Invoke(ctx, "/api_v1.RealEstate/GetListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealEstateServer is the server API for RealEstate service.
// All implementations must embed UnimplementedRealEstateServer
// for forward compatibility
type RealEstateServer interface {
	GetListings(context.Context, *GetListingsRequest) (*GetListingsResponse, error)
	mustEmbedUnimplementedRealEstateServer()
}

// UnimplementedRealEstateServer must be embedded to have forward compatible implementations.
type UnimplementedRealEstateServer struct {
}

func (UnimplementedRealEstateServer) GetListings(context.Context, *GetListingsRequest) (*GetListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListings not implemented")
}
func (UnimplementedRealEstateServer) mustEmbedUnimplementedRealEstateServer() {}

// UnsafeRealEstateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealEstateServer will
// result in compilation errors.
type UnsafeRealEstateServer interface {
	mustEmbedUnimplementedRealEstateServer()
}

func RegisterRealEstateServer(s grpc.ServiceRegistrar, srv RealEstateServer) {
	s.RegisterService(&RealEstate_ServiceDesc, srv)
}

func _RealEstate_GetListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealEstateServer).GetListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_v1.RealEstate/GetListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealEstateServer).GetListings(ctx, req.(*GetListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealEstate_ServiceDesc is the grpc.ServiceDesc for RealEstate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealEstate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_v1.RealEstate",
	HandlerType: (*RealEstateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListings",
			Handler:    _RealEstate_GetListings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "real_estate_service.proto",
}
